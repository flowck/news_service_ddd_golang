// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NewsArticlesTopic is an object representing the database table.
type NewsArticlesTopic struct {
	ID             int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	TopicID        string `boil:"topic_id" json:"topic_id" toml:"topic_id" yaml:"topic_id"`
	NewsArticlesID string `boil:"news_articles_id" json:"news_articles_id" toml:"news_articles_id" yaml:"news_articles_id"`

	R *newsArticlesTopicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L newsArticlesTopicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NewsArticlesTopicColumns = struct {
	ID             string
	TopicID        string
	NewsArticlesID string
}{
	ID:             "id",
	TopicID:        "topic_id",
	NewsArticlesID: "news_articles_id",
}

var NewsArticlesTopicTableColumns = struct {
	ID             string
	TopicID        string
	NewsArticlesID string
}{
	ID:             "news_articles_topics.id",
	TopicID:        "news_articles_topics.topic_id",
	NewsArticlesID: "news_articles_topics.news_articles_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var NewsArticlesTopicWhere = struct {
	ID             whereHelperint
	TopicID        whereHelperstring
	NewsArticlesID whereHelperstring
}{
	ID:             whereHelperint{field: "\"news_articles_topics\".\"id\""},
	TopicID:        whereHelperstring{field: "\"news_articles_topics\".\"topic_id\""},
	NewsArticlesID: whereHelperstring{field: "\"news_articles_topics\".\"news_articles_id\""},
}

// NewsArticlesTopicRels is where relationship names are stored.
var NewsArticlesTopicRels = struct {
	NewsArticle string
	Topic       string
}{
	NewsArticle: "NewsArticle",
	Topic:       "Topic",
}

// newsArticlesTopicR is where relationships are stored.
type newsArticlesTopicR struct {
	NewsArticle *NewsArticle `boil:"NewsArticle" json:"NewsArticle" toml:"NewsArticle" yaml:"NewsArticle"`
	Topic       *Topic       `boil:"Topic" json:"Topic" toml:"Topic" yaml:"Topic"`
}

// NewStruct creates a new relationship struct
func (*newsArticlesTopicR) NewStruct() *newsArticlesTopicR {
	return &newsArticlesTopicR{}
}

func (r *newsArticlesTopicR) GetNewsArticle() *NewsArticle {
	if r == nil {
		return nil
	}
	return r.NewsArticle
}

func (r *newsArticlesTopicR) GetTopic() *Topic {
	if r == nil {
		return nil
	}
	return r.Topic
}

// newsArticlesTopicL is where Load methods for each relationship are stored.
type newsArticlesTopicL struct{}

var (
	newsArticlesTopicAllColumns            = []string{"id", "topic_id", "news_articles_id"}
	newsArticlesTopicColumnsWithoutDefault = []string{"topic_id", "news_articles_id"}
	newsArticlesTopicColumnsWithDefault    = []string{"id"}
	newsArticlesTopicPrimaryKeyColumns     = []string{"id"}
	newsArticlesTopicGeneratedColumns      = []string{}
)

type (
	// NewsArticlesTopicSlice is an alias for a slice of pointers to NewsArticlesTopic.
	// This should almost always be used instead of []NewsArticlesTopic.
	NewsArticlesTopicSlice []*NewsArticlesTopic
	// NewsArticlesTopicHook is the signature for custom NewsArticlesTopic hook methods
	NewsArticlesTopicHook func(context.Context, boil.ContextExecutor, *NewsArticlesTopic) error

	newsArticlesTopicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	newsArticlesTopicType                 = reflect.TypeOf(&NewsArticlesTopic{})
	newsArticlesTopicMapping              = queries.MakeStructMapping(newsArticlesTopicType)
	newsArticlesTopicPrimaryKeyMapping, _ = queries.BindMapping(newsArticlesTopicType, newsArticlesTopicMapping, newsArticlesTopicPrimaryKeyColumns)
	newsArticlesTopicInsertCacheMut       sync.RWMutex
	newsArticlesTopicInsertCache          = make(map[string]insertCache)
	newsArticlesTopicUpdateCacheMut       sync.RWMutex
	newsArticlesTopicUpdateCache          = make(map[string]updateCache)
	newsArticlesTopicUpsertCacheMut       sync.RWMutex
	newsArticlesTopicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var newsArticlesTopicAfterSelectHooks []NewsArticlesTopicHook

var newsArticlesTopicBeforeInsertHooks []NewsArticlesTopicHook
var newsArticlesTopicAfterInsertHooks []NewsArticlesTopicHook

var newsArticlesTopicBeforeUpdateHooks []NewsArticlesTopicHook
var newsArticlesTopicAfterUpdateHooks []NewsArticlesTopicHook

var newsArticlesTopicBeforeDeleteHooks []NewsArticlesTopicHook
var newsArticlesTopicAfterDeleteHooks []NewsArticlesTopicHook

var newsArticlesTopicBeforeUpsertHooks []NewsArticlesTopicHook
var newsArticlesTopicAfterUpsertHooks []NewsArticlesTopicHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NewsArticlesTopic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsArticlesTopicAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NewsArticlesTopic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsArticlesTopicBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NewsArticlesTopic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsArticlesTopicAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NewsArticlesTopic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsArticlesTopicBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NewsArticlesTopic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsArticlesTopicAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NewsArticlesTopic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsArticlesTopicBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NewsArticlesTopic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsArticlesTopicAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NewsArticlesTopic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsArticlesTopicBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NewsArticlesTopic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range newsArticlesTopicAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNewsArticlesTopicHook registers your hook function for all future operations.
func AddNewsArticlesTopicHook(hookPoint boil.HookPoint, newsArticlesTopicHook NewsArticlesTopicHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		newsArticlesTopicAfterSelectHooks = append(newsArticlesTopicAfterSelectHooks, newsArticlesTopicHook)
	case boil.BeforeInsertHook:
		newsArticlesTopicBeforeInsertHooks = append(newsArticlesTopicBeforeInsertHooks, newsArticlesTopicHook)
	case boil.AfterInsertHook:
		newsArticlesTopicAfterInsertHooks = append(newsArticlesTopicAfterInsertHooks, newsArticlesTopicHook)
	case boil.BeforeUpdateHook:
		newsArticlesTopicBeforeUpdateHooks = append(newsArticlesTopicBeforeUpdateHooks, newsArticlesTopicHook)
	case boil.AfterUpdateHook:
		newsArticlesTopicAfterUpdateHooks = append(newsArticlesTopicAfterUpdateHooks, newsArticlesTopicHook)
	case boil.BeforeDeleteHook:
		newsArticlesTopicBeforeDeleteHooks = append(newsArticlesTopicBeforeDeleteHooks, newsArticlesTopicHook)
	case boil.AfterDeleteHook:
		newsArticlesTopicAfterDeleteHooks = append(newsArticlesTopicAfterDeleteHooks, newsArticlesTopicHook)
	case boil.BeforeUpsertHook:
		newsArticlesTopicBeforeUpsertHooks = append(newsArticlesTopicBeforeUpsertHooks, newsArticlesTopicHook)
	case boil.AfterUpsertHook:
		newsArticlesTopicAfterUpsertHooks = append(newsArticlesTopicAfterUpsertHooks, newsArticlesTopicHook)
	}
}

// One returns a single newsArticlesTopic record from the query.
func (q newsArticlesTopicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NewsArticlesTopic, error) {
	o := &NewsArticlesTopic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for news_articles_topics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NewsArticlesTopic records from the query.
func (q newsArticlesTopicQuery) All(ctx context.Context, exec boil.ContextExecutor) (NewsArticlesTopicSlice, error) {
	var o []*NewsArticlesTopic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NewsArticlesTopic slice")
	}

	if len(newsArticlesTopicAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NewsArticlesTopic records in the query.
func (q newsArticlesTopicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count news_articles_topics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q newsArticlesTopicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if news_articles_topics exists")
	}

	return count > 0, nil
}

// NewsArticle pointed to by the foreign key.
func (o *NewsArticlesTopic) NewsArticle(mods ...qm.QueryMod) newsArticleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NewsArticlesID),
	}

	queryMods = append(queryMods, mods...)

	return NewsArticles(queryMods...)
}

// Topic pointed to by the foreign key.
func (o *NewsArticlesTopic) Topic(mods ...qm.QueryMod) topicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TopicID),
	}

	queryMods = append(queryMods, mods...)

	return Topics(queryMods...)
}

// LoadNewsArticle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (newsArticlesTopicL) LoadNewsArticle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNewsArticlesTopic interface{}, mods queries.Applicator) error {
	var slice []*NewsArticlesTopic
	var object *NewsArticlesTopic

	if singular {
		var ok bool
		object, ok = maybeNewsArticlesTopic.(*NewsArticlesTopic)
		if !ok {
			object = new(NewsArticlesTopic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNewsArticlesTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNewsArticlesTopic))
			}
		}
	} else {
		s, ok := maybeNewsArticlesTopic.(*[]*NewsArticlesTopic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNewsArticlesTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNewsArticlesTopic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &newsArticlesTopicR{}
		}
		args = append(args, object.NewsArticlesID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &newsArticlesTopicR{}
			}

			for _, a := range args {
				if a == obj.NewsArticlesID {
					continue Outer
				}
			}

			args = append(args, obj.NewsArticlesID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`news_articles`),
		qm.WhereIn(`news_articles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NewsArticle")
	}

	var resultSlice []*NewsArticle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NewsArticle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for news_articles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for news_articles")
	}

	if len(newsArticleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NewsArticle = foreign
		if foreign.R == nil {
			foreign.R = &newsArticleR{}
		}
		foreign.R.NewsArticlesTopics = append(foreign.R.NewsArticlesTopics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NewsArticlesID == foreign.ID {
				local.R.NewsArticle = foreign
				if foreign.R == nil {
					foreign.R = &newsArticleR{}
				}
				foreign.R.NewsArticlesTopics = append(foreign.R.NewsArticlesTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadTopic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (newsArticlesTopicL) LoadTopic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNewsArticlesTopic interface{}, mods queries.Applicator) error {
	var slice []*NewsArticlesTopic
	var object *NewsArticlesTopic

	if singular {
		var ok bool
		object, ok = maybeNewsArticlesTopic.(*NewsArticlesTopic)
		if !ok {
			object = new(NewsArticlesTopic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNewsArticlesTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNewsArticlesTopic))
			}
		}
	} else {
		s, ok := maybeNewsArticlesTopic.(*[]*NewsArticlesTopic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNewsArticlesTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNewsArticlesTopic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &newsArticlesTopicR{}
		}
		args = append(args, object.TopicID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &newsArticlesTopicR{}
			}

			for _, a := range args {
				if a == obj.TopicID {
					continue Outer
				}
			}

			args = append(args, obj.TopicID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`topics`),
		qm.WhereIn(`topics.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Topic")
	}

	var resultSlice []*Topic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Topic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if len(topicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Topic = foreign
		if foreign.R == nil {
			foreign.R = &topicR{}
		}
		foreign.R.NewsArticlesTopics = append(foreign.R.NewsArticlesTopics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TopicID == foreign.ID {
				local.R.Topic = foreign
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.NewsArticlesTopics = append(foreign.R.NewsArticlesTopics, local)
				break
			}
		}
	}

	return nil
}

// SetNewsArticle of the newsArticlesTopic to the related item.
// Sets o.R.NewsArticle to related.
// Adds o to related.R.NewsArticlesTopics.
func (o *NewsArticlesTopic) SetNewsArticle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NewsArticle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"news_articles_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"news_articles_id"}),
		strmangle.WhereClause("\"", "\"", 2, newsArticlesTopicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NewsArticlesID = related.ID
	if o.R == nil {
		o.R = &newsArticlesTopicR{
			NewsArticle: related,
		}
	} else {
		o.R.NewsArticle = related
	}

	if related.R == nil {
		related.R = &newsArticleR{
			NewsArticlesTopics: NewsArticlesTopicSlice{o},
		}
	} else {
		related.R.NewsArticlesTopics = append(related.R.NewsArticlesTopics, o)
	}

	return nil
}

// SetTopic of the newsArticlesTopic to the related item.
// Sets o.R.Topic to related.
// Adds o to related.R.NewsArticlesTopics.
func (o *NewsArticlesTopic) SetTopic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Topic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"news_articles_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"topic_id"}),
		strmangle.WhereClause("\"", "\"", 2, newsArticlesTopicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TopicID = related.ID
	if o.R == nil {
		o.R = &newsArticlesTopicR{
			Topic: related,
		}
	} else {
		o.R.Topic = related
	}

	if related.R == nil {
		related.R = &topicR{
			NewsArticlesTopics: NewsArticlesTopicSlice{o},
		}
	} else {
		related.R.NewsArticlesTopics = append(related.R.NewsArticlesTopics, o)
	}

	return nil
}

// NewsArticlesTopics retrieves all the records using an executor.
func NewsArticlesTopics(mods ...qm.QueryMod) newsArticlesTopicQuery {
	mods = append(mods, qm.From("\"news_articles_topics\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"news_articles_topics\".*"})
	}

	return newsArticlesTopicQuery{q}
}

// FindNewsArticlesTopic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNewsArticlesTopic(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*NewsArticlesTopic, error) {
	newsArticlesTopicObj := &NewsArticlesTopic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"news_articles_topics\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, newsArticlesTopicObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from news_articles_topics")
	}

	if err = newsArticlesTopicObj.doAfterSelectHooks(ctx, exec); err != nil {
		return newsArticlesTopicObj, err
	}

	return newsArticlesTopicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NewsArticlesTopic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no news_articles_topics provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(newsArticlesTopicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	newsArticlesTopicInsertCacheMut.RLock()
	cache, cached := newsArticlesTopicInsertCache[key]
	newsArticlesTopicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			newsArticlesTopicAllColumns,
			newsArticlesTopicColumnsWithDefault,
			newsArticlesTopicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(newsArticlesTopicType, newsArticlesTopicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(newsArticlesTopicType, newsArticlesTopicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"news_articles_topics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"news_articles_topics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into news_articles_topics")
	}

	if !cached {
		newsArticlesTopicInsertCacheMut.Lock()
		newsArticlesTopicInsertCache[key] = cache
		newsArticlesTopicInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NewsArticlesTopic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NewsArticlesTopic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	newsArticlesTopicUpdateCacheMut.RLock()
	cache, cached := newsArticlesTopicUpdateCache[key]
	newsArticlesTopicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			newsArticlesTopicAllColumns,
			newsArticlesTopicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update news_articles_topics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"news_articles_topics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, newsArticlesTopicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(newsArticlesTopicType, newsArticlesTopicMapping, append(wl, newsArticlesTopicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update news_articles_topics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for news_articles_topics")
	}

	if !cached {
		newsArticlesTopicUpdateCacheMut.Lock()
		newsArticlesTopicUpdateCache[key] = cache
		newsArticlesTopicUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q newsArticlesTopicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for news_articles_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for news_articles_topics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NewsArticlesTopicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), newsArticlesTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"news_articles_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, newsArticlesTopicPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in newsArticlesTopic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all newsArticlesTopic")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NewsArticlesTopic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no news_articles_topics provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(newsArticlesTopicColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	newsArticlesTopicUpsertCacheMut.RLock()
	cache, cached := newsArticlesTopicUpsertCache[key]
	newsArticlesTopicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			newsArticlesTopicAllColumns,
			newsArticlesTopicColumnsWithDefault,
			newsArticlesTopicColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			newsArticlesTopicAllColumns,
			newsArticlesTopicPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert news_articles_topics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(newsArticlesTopicPrimaryKeyColumns))
			copy(conflict, newsArticlesTopicPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"news_articles_topics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(newsArticlesTopicType, newsArticlesTopicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(newsArticlesTopicType, newsArticlesTopicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert news_articles_topics")
	}

	if !cached {
		newsArticlesTopicUpsertCacheMut.Lock()
		newsArticlesTopicUpsertCache[key] = cache
		newsArticlesTopicUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NewsArticlesTopic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NewsArticlesTopic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NewsArticlesTopic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), newsArticlesTopicPrimaryKeyMapping)
	sql := "DELETE FROM \"news_articles_topics\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from news_articles_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for news_articles_topics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q newsArticlesTopicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no newsArticlesTopicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from news_articles_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for news_articles_topics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NewsArticlesTopicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(newsArticlesTopicBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), newsArticlesTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"news_articles_topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, newsArticlesTopicPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from newsArticlesTopic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for news_articles_topics")
	}

	if len(newsArticlesTopicAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NewsArticlesTopic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNewsArticlesTopic(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NewsArticlesTopicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NewsArticlesTopicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), newsArticlesTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"news_articles_topics\".* FROM \"news_articles_topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, newsArticlesTopicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NewsArticlesTopicSlice")
	}

	*o = slice

	return nil
}

// NewsArticlesTopicExists checks if the NewsArticlesTopic row exists.
func NewsArticlesTopicExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"news_articles_topics\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if news_articles_topics exists")
	}

	return exists, nil
}

// Exists checks if the NewsArticlesTopic row exists.
func (o *NewsArticlesTopic) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NewsArticlesTopicExists(ctx, exec, o.ID)
}
