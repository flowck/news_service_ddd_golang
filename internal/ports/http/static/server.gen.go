// Package static provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package static

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error custom error code such as 'email_in_use'
	Code string `json:"code"`

	// Message A description about the error
	Message string `json:"message"`
}

// News defines model for News.
type News struct {
	Content      string    `json:"content"`
	Id           string    `json:"id"`
	LastEditedAt time.Time `json:"lastEditedAt"`
	PublishedAt  time.Time `json:"publishedAt"`
	Slug         string    `json:"slug"`
	Status       string    `json:"status"`
	Title        string    `json:"title"`
	Topics       []string  `json:"topics"`
}

// PublishNewsRequest defines model for PublishNewsRequest.
type PublishNewsRequest struct {
	Content     string    `json:"content"`
	PublishedAt time.Time `json:"publishedAt"`
	Slug        string    `json:"slug"`
	Status      string    `json:"status"`
	Title       string    `json:"title"`
	TopicIds    []string  `json:"topicIds"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// GetNewsByFiltersPayload defines model for GetNewsByFiltersPayload.
type GetNewsByFiltersPayload struct {
	Data         []News `json:"data"`
	Page         int    `json:"page"`
	TotalPages   int64  `json:"total_pages"`
	TotalResults int64  `json:"total_results"`
}

// GetNewsPayload defines model for GetNewsPayload.
type GetNewsPayload struct {
	Data News `json:"data"`
}

// GetNewsParams defines parameters for GetNews.
type GetNewsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Page   *int    `form:"page,omitempty" json:"page,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	Topic  *string `form:"topic,omitempty" json:"topic,omitempty"`
}

// PublishNewsJSONRequestBody defines body for PublishNews for application/json ContentType.
type PublishNewsJSONRequestBody = PublishNewsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get news
	// (GET /news)
	GetNews(w http.ResponseWriter, r *http.Request, params GetNewsParams)
	// Publish news
	// (POST /news)
	PublishNews(w http.ResponseWriter, r *http.Request)
	// Get news
	// (GET /news/{newsID})
	GetNewsByID(w http.ResponseWriter, r *http.Request, newsID string)
	// UnPublish news
	// (PATCH /news/{newsID}/unpublish)
	UnPublishNews(w http.ResponseWriter, r *http.Request, newsID string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetNews operation middleware
func (siw *ServerInterfaceWrapper) GetNews(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNewsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "topic" -------------

	err = runtime.BindQueryParameter("form", true, false, "topic", r.URL.Query(), &params.Topic)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "topic", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNews(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PublishNews operation middleware
func (siw *ServerInterfaceWrapper) PublishNews(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishNews(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNewsByID operation middleware
func (siw *ServerInterfaceWrapper) GetNewsByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "newsID" -------------
	var newsID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "newsID", runtime.ParamLocationPath, chi.URLParam(r, "newsID"), &newsID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNewsByID(w, r, newsID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UnPublishNews operation middleware
func (siw *ServerInterfaceWrapper) UnPublishNews(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "newsID" -------------
	var newsID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "newsID", runtime.ParamLocationPath, chi.URLParam(r, "newsID"), &newsID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnPublishNews(w, r, newsID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/news", wrapper.GetNews)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/news", wrapper.PublishNews)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/news/{newsID}", wrapper.GetNewsByID)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/news/{newsID}/unpublish", wrapper.UnPublishNews)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWS2/jNhD+KwJbYC+qpTSLHnRq0ngLt90Hki16WAQGTY0lbvlQyGGyRqD/XpCUZcuS",
	"m0fTxV4MUyS/mfnmmxneE6ZloxUotKS4JwZso5WFsLiANXUC58Zo49dMKwSF/i9tGsEZRa5V9tlq5b9Z",
	"VoOk/t/3BtakIN9lO/As7tosoF12ZkjbtikpwTLDGw9GCnKWVKDAcJaAP5qY/mxKfgV8B3f2fPOGCwRj",
	"P9CN0LR8knON0Q0Y5DHGkmL4yhGkfch3b9u7gZsGSEGoMXTj1w2twN/tvnOFUIEJJzVSsfT7AXytjaQY",
	"j/z0mqRHbxiwTuDj7rQpMXDjuIGSFJ9iREPLh6idx9c9ll59BoZT2Xj/+x7vL0f3wyxPRfVYh9u0cyDY",
	"HCpu5BLTZfg6hAmXEuYsatkJ0R9MrGN1Qm3yCiTlYsnV0ll4tcuKRcNV5TmTYG2ni0OB760TutIOE6wh",
	"WhkjHRCxhU2j42NKUhIInIizz9jIV15OfhbU4rzkCOUZDqRYUoQfkEuYCrxxK8Ft/bRLVrhq0geLFJ2d",
	"3EKOAqZ3dMOZHdT1+MygiA9Y5iXZ4ne+pT2BvU+9nWHMB7xNZehDPO4TdQk3Diw+LV/fCsWL8r+Q/Eh+",
	"vZFhyBN9ICUWmDMcN1e+8iOF50ANmDOHtV+twurNlqvf/vpIuj7hkeLujrcasYn9Bb4gGEXFhY6SGlaz",
	"P2eLLKs41m41Y1pma6Hv2N+Zgju7tGBuOYNlWZbLSguqquxyfnbxdj6TXmLOiOdghJpVa73VCWVBB6En",
	"kYKsuZFc6Rmrqaqo4j9XfsPjklG/9BpMrqIFL13OoGuTigZi3i4+Pt/R7I/FL/N3VyFaLwcw0r5fb809",
	"J/Jek2T/BEnJLRgbQ8pn+ezEm9MNKNpwUpDTWT47DXMP65DEgO//VBCo85UXRtiiJMV23oULhkrwbw1S",
	"fLon3OPfODAbkm4JElxy3EopTDdJv3DpJClO8jwlkqtuNTW7pzGb2OL3IJ8B0pfRDmY0W6Zvhrr714vX",
	"6fCt+GOeH5vr/bns2PMtiDK8NR/GGDxKQ907KanZxKwlKqYNaeUTFkfhte+Y2k7kea8Pk9ibwOK5Ljcv",
	"9tyd6PTtsA+icdCO2Hw97jShUvs2+FKkdQ4eIa5NY6Vk9/53cdE+VDLnm8XFkbLxtbeTWMQjh0z8X5r7",
	"alIbMZY51SUtzHiKrB6z96caSvEr8XdMZb3LL6ezPsJjvIURbm63Ie8GTpFlQjMqam2xOM3znPi2dWz/",
	"xO9ft/8EAAD//1945I3ZDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
