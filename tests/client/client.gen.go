// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateTopicRequest defines model for CreateTopicRequest.
type CreateTopicRequest struct {
	Name string `json:"name"`
}

// EditNewsRequest defines model for EditNewsRequest.
type EditNewsRequest struct {
	Content     string    `json:"content"`
	PublishedAt time.Time `json:"publishedAt"`
	Slug        string    `json:"slug"`
	Status      string    `json:"status"`
	Title       string    `json:"title"`
	TopicsIds   *[]string `json:"topicsIds,omitempty"`
}

// EditTopicRequest defines model for EditTopicRequest.
type EditTopicRequest struct {
	Name string `json:"name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error custom error code such as 'email_in_use'
	Code string `json:"code"`

	// Message A description about the error
	Message string `json:"message"`
}

// News defines model for News.
type News struct {
	Content      string    `json:"content"`
	Id           string    `json:"id"`
	LastEditedAt time.Time `json:"lastEditedAt"`
	PublishedAt  time.Time `json:"publishedAt"`
	Slug         string    `json:"slug"`
	Status       string    `json:"status"`
	Title        string    `json:"title"`
	Topics       []Topic   `json:"topics"`
}

// PublishNewsRequest defines model for PublishNewsRequest.
type PublishNewsRequest struct {
	Content     string    `json:"content"`
	PublishedAt time.Time `json:"publishedAt"`
	Slug        string    `json:"slug"`
	Status      string    `json:"status"`
	Title       string    `json:"title"`
	TopicIds    []string  `json:"topicIds"`
}

// Topic defines model for Topic.
type Topic struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// GetNewsByFiltersPayload defines model for GetNewsByFiltersPayload.
type GetNewsByFiltersPayload struct {
	Data         []News `json:"data"`
	Page         int    `json:"page"`
	TotalPages   int64  `json:"total_pages"`
	TotalResults int64  `json:"total_results"`
}

// GetNewsPayload defines model for GetNewsPayload.
type GetNewsPayload struct {
	Data News `json:"data"`
}

// GetTopicPayload defines model for GetTopicPayload.
type GetTopicPayload struct {
	Data Topic `json:"data"`
}

// GetTopicsPayload defines model for GetTopicsPayload.
type GetTopicsPayload struct {
	Data []Topic `json:"data"`
}

// GetNewsParams defines parameters for GetNews.
type GetNewsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Page   *int    `form:"page,omitempty" json:"page,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	Topic  *string `form:"topic,omitempty" json:"topic,omitempty"`
}

// PublishNewsJSONRequestBody defines body for PublishNews for application/json ContentType.
type PublishNewsJSONRequestBody = PublishNewsRequest

// EditNewsJSONRequestBody defines body for EditNews for application/json ContentType.
type EditNewsJSONRequestBody = EditNewsRequest

// CreateTopicJSONRequestBody defines body for CreateTopic for application/json ContentType.
type CreateTopicJSONRequestBody = CreateTopicRequest

// EditTopicJSONRequestBody defines body for EditTopic for application/json ContentType.
type EditTopicJSONRequestBody = EditTopicRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetNews request
	GetNews(ctx context.Context, params *GetNewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishNews request with any body
	PublishNewsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishNews(ctx context.Context, body PublishNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewsByID request
	GetNewsByID(ctx context.Context, newsID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditNews request with any body
	EditNewsWithBody(ctx context.Context, newsID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditNews(ctx context.Context, newsID string, body EditNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnPublishNews request
	UnPublishNews(ctx context.Context, newsID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopics request
	GetTopics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTopic request with any body
	CreateTopicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTopic(ctx context.Context, body CreateTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveTopicByID request
	RemoveTopicByID(ctx context.Context, topicID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopicByID request
	GetTopicByID(ctx context.Context, topicID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditTopic request with any body
	EditTopicWithBody(ctx context.Context, topicID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditTopic(ctx context.Context, topicID string, body EditTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetNews(ctx context.Context, params *GetNewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishNewsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishNewsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishNews(ctx context.Context, body PublishNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishNewsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewsByID(ctx context.Context, newsID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewsByIDRequest(c.Server, newsID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditNewsWithBody(ctx context.Context, newsID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditNewsRequestWithBody(c.Server, newsID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditNews(ctx context.Context, newsID string, body EditNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditNewsRequest(c.Server, newsID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnPublishNews(ctx context.Context, newsID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnPublishNewsRequest(c.Server, newsID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopicsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTopicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTopicRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTopic(ctx context.Context, body CreateTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTopicRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveTopicByID(ctx context.Context, topicID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveTopicByIDRequest(c.Server, topicID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopicByID(ctx context.Context, topicID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopicByIDRequest(c.Server, topicID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditTopicWithBody(ctx context.Context, topicID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditTopicRequestWithBody(c.Server, topicID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditTopic(ctx context.Context, topicID string, body EditTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditTopicRequest(c.Server, topicID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetNewsRequest generates requests for GetNews
func NewGetNewsRequest(server string, params *GetNewsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Topic != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topic", runtime.ParamLocationQuery, *params.Topic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishNewsRequest calls the generic PublishNews builder with application/json body
func NewPublishNewsRequest(server string, body PublishNewsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishNewsRequestWithBody(server, "application/json", bodyReader)
}

// NewPublishNewsRequestWithBody generates requests for PublishNews with any type of body
func NewPublishNewsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewsByIDRequest generates requests for GetNewsByID
func NewGetNewsByIDRequest(server string, newsID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsID", runtime.ParamLocationPath, newsID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditNewsRequest calls the generic EditNews builder with application/json body
func NewEditNewsRequest(server string, newsID string, body EditNewsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditNewsRequestWithBody(server, newsID, "application/json", bodyReader)
}

// NewEditNewsRequestWithBody generates requests for EditNews with any type of body
func NewEditNewsRequestWithBody(server string, newsID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsID", runtime.ParamLocationPath, newsID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnPublishNewsRequest generates requests for UnPublishNews
func NewUnPublishNewsRequest(server string, newsID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsID", runtime.ParamLocationPath, newsID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news/%s/unpublish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTopicsRequest generates requests for GetTopics
func NewGetTopicsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTopicRequest calls the generic CreateTopic builder with application/json body
func NewCreateTopicRequest(server string, body CreateTopicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTopicRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTopicRequestWithBody generates requests for CreateTopic with any type of body
func NewCreateTopicRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveTopicByIDRequest generates requests for RemoveTopicByID
func NewRemoveTopicByIDRequest(server string, topicID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "topicID", runtime.ParamLocationPath, topicID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTopicByIDRequest generates requests for GetTopicByID
func NewGetTopicByIDRequest(server string, topicID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "topicID", runtime.ParamLocationPath, topicID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditTopicRequest calls the generic EditTopic builder with application/json body
func NewEditTopicRequest(server string, topicID string, body EditTopicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditTopicRequestWithBody(server, topicID, "application/json", bodyReader)
}

// NewEditTopicRequestWithBody generates requests for EditTopic with any type of body
func NewEditTopicRequestWithBody(server string, topicID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "topicID", runtime.ParamLocationPath, topicID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetNews request
	GetNewsWithResponse(ctx context.Context, params *GetNewsParams, reqEditors ...RequestEditorFn) (*GetNewsResponse, error)

	// PublishNews request with any body
	PublishNewsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishNewsResponse, error)

	PublishNewsWithResponse(ctx context.Context, body PublishNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishNewsResponse, error)

	// GetNewsByID request
	GetNewsByIDWithResponse(ctx context.Context, newsID string, reqEditors ...RequestEditorFn) (*GetNewsByIDResponse, error)

	// EditNews request with any body
	EditNewsWithBodyWithResponse(ctx context.Context, newsID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditNewsResponse, error)

	EditNewsWithResponse(ctx context.Context, newsID string, body EditNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*EditNewsResponse, error)

	// UnPublishNews request
	UnPublishNewsWithResponse(ctx context.Context, newsID string, reqEditors ...RequestEditorFn) (*UnPublishNewsResponse, error)

	// GetTopics request
	GetTopicsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTopicsResponse, error)

	// CreateTopic request with any body
	CreateTopicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTopicResponse, error)

	CreateTopicWithResponse(ctx context.Context, body CreateTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTopicResponse, error)

	// RemoveTopicByID request
	RemoveTopicByIDWithResponse(ctx context.Context, topicID string, reqEditors ...RequestEditorFn) (*RemoveTopicByIDResponse, error)

	// GetTopicByID request
	GetTopicByIDWithResponse(ctx context.Context, topicID string, reqEditors ...RequestEditorFn) (*GetTopicByIDResponse, error)

	// EditTopic request with any body
	EditTopicWithBodyWithResponse(ctx context.Context, topicID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditTopicResponse, error)

	EditTopicWithResponse(ctx context.Context, topicID string, body EditTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*EditTopicResponse, error)
}

type GetNewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data         []News `json:"data"`
		Page         int    `json:"page"`
		TotalPages   int64  `json:"total_pages"`
		TotalResults int64  `json:"total_results"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetNewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishNewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PublishNewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishNewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewsByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data News `json:"data"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetNewsByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewsByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditNewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EditNewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditNewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnPublishNewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UnPublishNewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnPublishNewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Topic `json:"data"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTopicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTopicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTopicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTopicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveTopicByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveTopicByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveTopicByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopicByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Topic `json:"data"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTopicByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopicByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditTopicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EditTopicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditTopicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetNewsWithResponse request returning *GetNewsResponse
func (c *ClientWithResponses) GetNewsWithResponse(ctx context.Context, params *GetNewsParams, reqEditors ...RequestEditorFn) (*GetNewsResponse, error) {
	rsp, err := c.GetNews(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewsResponse(rsp)
}

// PublishNewsWithBodyWithResponse request with arbitrary body returning *PublishNewsResponse
func (c *ClientWithResponses) PublishNewsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishNewsResponse, error) {
	rsp, err := c.PublishNewsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishNewsResponse(rsp)
}

func (c *ClientWithResponses) PublishNewsWithResponse(ctx context.Context, body PublishNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishNewsResponse, error) {
	rsp, err := c.PublishNews(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishNewsResponse(rsp)
}

// GetNewsByIDWithResponse request returning *GetNewsByIDResponse
func (c *ClientWithResponses) GetNewsByIDWithResponse(ctx context.Context, newsID string, reqEditors ...RequestEditorFn) (*GetNewsByIDResponse, error) {
	rsp, err := c.GetNewsByID(ctx, newsID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewsByIDResponse(rsp)
}

// EditNewsWithBodyWithResponse request with arbitrary body returning *EditNewsResponse
func (c *ClientWithResponses) EditNewsWithBodyWithResponse(ctx context.Context, newsID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditNewsResponse, error) {
	rsp, err := c.EditNewsWithBody(ctx, newsID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditNewsResponse(rsp)
}

func (c *ClientWithResponses) EditNewsWithResponse(ctx context.Context, newsID string, body EditNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*EditNewsResponse, error) {
	rsp, err := c.EditNews(ctx, newsID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditNewsResponse(rsp)
}

// UnPublishNewsWithResponse request returning *UnPublishNewsResponse
func (c *ClientWithResponses) UnPublishNewsWithResponse(ctx context.Context, newsID string, reqEditors ...RequestEditorFn) (*UnPublishNewsResponse, error) {
	rsp, err := c.UnPublishNews(ctx, newsID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnPublishNewsResponse(rsp)
}

// GetTopicsWithResponse request returning *GetTopicsResponse
func (c *ClientWithResponses) GetTopicsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTopicsResponse, error) {
	rsp, err := c.GetTopics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopicsResponse(rsp)
}

// CreateTopicWithBodyWithResponse request with arbitrary body returning *CreateTopicResponse
func (c *ClientWithResponses) CreateTopicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTopicResponse, error) {
	rsp, err := c.CreateTopicWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTopicResponse(rsp)
}

func (c *ClientWithResponses) CreateTopicWithResponse(ctx context.Context, body CreateTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTopicResponse, error) {
	rsp, err := c.CreateTopic(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTopicResponse(rsp)
}

// RemoveTopicByIDWithResponse request returning *RemoveTopicByIDResponse
func (c *ClientWithResponses) RemoveTopicByIDWithResponse(ctx context.Context, topicID string, reqEditors ...RequestEditorFn) (*RemoveTopicByIDResponse, error) {
	rsp, err := c.RemoveTopicByID(ctx, topicID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveTopicByIDResponse(rsp)
}

// GetTopicByIDWithResponse request returning *GetTopicByIDResponse
func (c *ClientWithResponses) GetTopicByIDWithResponse(ctx context.Context, topicID string, reqEditors ...RequestEditorFn) (*GetTopicByIDResponse, error) {
	rsp, err := c.GetTopicByID(ctx, topicID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopicByIDResponse(rsp)
}

// EditTopicWithBodyWithResponse request with arbitrary body returning *EditTopicResponse
func (c *ClientWithResponses) EditTopicWithBodyWithResponse(ctx context.Context, topicID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditTopicResponse, error) {
	rsp, err := c.EditTopicWithBody(ctx, topicID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditTopicResponse(rsp)
}

func (c *ClientWithResponses) EditTopicWithResponse(ctx context.Context, topicID string, body EditTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*EditTopicResponse, error) {
	rsp, err := c.EditTopic(ctx, topicID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditTopicResponse(rsp)
}

// ParseGetNewsResponse parses an HTTP response from a GetNewsWithResponse call
func ParseGetNewsResponse(rsp *http.Response) (*GetNewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data         []News `json:"data"`
			Page         int    `json:"page"`
			TotalPages   int64  `json:"total_pages"`
			TotalResults int64  `json:"total_results"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePublishNewsResponse parses an HTTP response from a PublishNewsWithResponse call
func ParsePublishNewsResponse(rsp *http.Response) (*PublishNewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishNewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewsByIDResponse parses an HTTP response from a GetNewsByIDWithResponse call
func ParseGetNewsByIDResponse(rsp *http.Response) (*GetNewsByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewsByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data News `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEditNewsResponse parses an HTTP response from a EditNewsWithResponse call
func ParseEditNewsResponse(rsp *http.Response) (*EditNewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditNewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUnPublishNewsResponse parses an HTTP response from a UnPublishNewsWithResponse call
func ParseUnPublishNewsResponse(rsp *http.Response) (*UnPublishNewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnPublishNewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTopicsResponse parses an HTTP response from a GetTopicsWithResponse call
func ParseGetTopicsResponse(rsp *http.Response) (*GetTopicsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Topic `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTopicResponse parses an HTTP response from a CreateTopicWithResponse call
func ParseCreateTopicResponse(rsp *http.Response) (*CreateTopicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTopicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveTopicByIDResponse parses an HTTP response from a RemoveTopicByIDWithResponse call
func ParseRemoveTopicByIDResponse(rsp *http.Response) (*RemoveTopicByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveTopicByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTopicByIDResponse parses an HTTP response from a GetTopicByIDWithResponse call
func ParseGetTopicByIDResponse(rsp *http.Response) (*GetTopicByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopicByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Topic `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEditTopicResponse parses an HTTP response from a EditTopicWithResponse call
func ParseEditTopicResponse(rsp *http.Response) (*EditTopicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditTopicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYTW/jNhD9KwJbYC+q5TSLHnRqsskWbrsfSFL0sAgMWhpL3IqkQg6TNQL/94KkJFuW",
	"lA9XNrYXwxLJ4cyb92ZIPZJE8lIKEKhJ/EgU6FIKDe7hApbUFHiplFT2OZECQaD9S8uyYAlFJkX0VUth",
	"3+kkB07tvx8VLElMfog2xiM/qiNn7arahqzX65CkoBPFSmuMxOQsyECAYkkAdmqgmrkh+Q3wIzzo89V7",
	"ViAo/ZmuCknTVzlXKlmCQuZjTCm6twyB6+d8t3tbN3BVAokJVYqu7HNJM7Brq/dMIGSg3EyJtJjbcWd8",
	"KRWn6Kf88paEgysUaFPgy9asQ6LgzjAFKYm/+IjaO+9arTy+bWzJxVdIsC8bn/7Ywn08uJ9HuS+qVzl8",
	"I0uWHMdjt9VYLh+b1JXzu6z+L8Gsw8o1t/k7BRTBbXMFdwY0dj0WlG8rSKNiIus44WZ1nQjJZcocQQft",
	"bwG5s0VISrMomM4hPcOW3lKK8BMyDhvNbRbpwmS91jRSNLp3CBkW0D/iEj9LdStr3WlPZchbrzwLm4gb",
	"j6pd7CbtmIcAPWzGWm2gJ1+pe9vmllsUJEaj5FV3sBMDbZI8oDp4A5yyYs7E3Gh405c2DlpXxXq362w9",
	"B3QhDQaYg9+la2knzNps6B3vC9hVtVfxkqW9rwuq0abndXz9bkg+cl1iKQlfSv1d4u9g2Ze1z376/762",
	"fEelxee1g+IA219WZhwLBmqNxQ0Soxiuri21/HbnQBWoM4O5fVq4p/d1dn7/+4ZULcxa8qObTOWIpW99",
	"8A1BCVpcSE/sdk2x83QcRRnD3CwmieTRspAPyT+RgAc916DuWQLzNE3nmSyoyKKry7OLD5cTbsMxqtjH",
	"hqscYilrZtLEMc9VRhKTJVOcCTlJcioyKtivmR2wdkmnlVvWB9d+BysWlkBVrH1WyIfZzf6ORn/O3l1+",
	"vHbRWgKC4vrTst5un8gbFZDtGSQk96C0D2k6mU5O7HayBEFLRmJyOplOTt2RGHOXRGff/snAQWdZ6s5d",
	"s5TE9VHYLVCUg72GkPjLI2HW/p0Btaq5GJOCcYY1ldyRjNNvjBtO4pPpNCScieqp71jfb7P0jWbL5B5G",
	"GuFuzHQU1r/SKf3Jhbdh+xr583Q6VOubedHQzc6R0l1Dn7fRuq863RvOqVr5rAXCpw1pZhPmG/KtrdFS",
	"9+R5q/ITX2xA47lMV6PdhHt6y7pd2FAZWHfQfNutNE6pTeEdC7TKwQHg1qFXSvRof2cX6+ckc76aXQzI",
	"xmpvQzFvj+wicSjOHZNqpgee+vJyUGzGp+/unWtf7vrz11joW2svJWxkRKUZdxyhmOTd7Pwl2pXgSPQd",
	"Ennj8niQNRE+gdvm7D6k8Jv6hL2XDttfPkZUYnPwr4Oq/Bwu/FufKw5U+Hs+iOwrHmckSJzB0XDz/gXU",
	"8iGo+30Hvw0tokd//PctIIUCELq4XgGX9z7qF3eCyu74WvKf3MYAy4flYQoWq8BfSLtke1I3RwbkFZo8",
	"lCSfgmqwS9aiPCBOh+mTI2odxm+XwxJ3d2d1XwO9uenFUVTIhBa51BifTqdTYu8LQ+Mndvx2/W8AAAD/",
	"/4pIHaNtGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
