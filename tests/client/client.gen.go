// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error custom error code such as 'email_in_use'
	Code string `json:"code"`

	// Message A description about the error
	Message string `json:"message"`
}

// GenericResponse defines model for GenericResponse.
type GenericResponse struct {
	Message string `json:"message"`
}

// PublishNewsRequest defines model for PublishNewsRequest.
type PublishNewsRequest struct {
	Content     string    `json:"content"`
	PublishedAt time.Time `json:"publishedAt"`
	Slug        string    `json:"slug"`
	Status      string    `json:"status"`
	Title       string    `json:"title"`
	Topics      []string  `json:"topics"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// DefaultSuccess defines model for DefaultSuccess.
type DefaultSuccess = GenericResponse

// GetNewsParams defines parameters for GetNews.
type GetNewsParams struct {
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
	Page   *float32 `form:"page,omitempty" json:"page,omitempty"`
	Status *string  `form:"status,omitempty" json:"status,omitempty"`
	Topic  *string  `form:"topic,omitempty" json:"topic,omitempty"`
}

// PublishNewsJSONRequestBody defines body for PublishNews for application/json ContentType.
type PublishNewsJSONRequestBody = PublishNewsRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetNews request
	GetNews(ctx context.Context, params *GetNewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishNews request with any body
	PublishNewsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishNews(ctx context.Context, body PublishNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetNews(ctx context.Context, params *GetNewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishNewsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishNewsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishNews(ctx context.Context, body PublishNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishNewsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetNewsRequest generates requests for GetNews
func NewGetNewsRequest(server string, params *GetNewsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Topic != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topic", runtime.ParamLocationQuery, *params.Topic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishNewsRequest calls the generic PublishNews builder with application/json body
func NewPublishNewsRequest(server string, body PublishNewsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishNewsRequestWithBody(server, "application/json", bodyReader)
}

// NewPublishNewsRequestWithBody generates requests for PublishNews with any type of body
func NewPublishNewsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetNews request
	GetNewsWithResponse(ctx context.Context, params *GetNewsParams, reqEditors ...RequestEditorFn) (*GetNewsResponse, error)

	// PublishNews request with any body
	PublishNewsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishNewsResponse, error)

	PublishNewsWithResponse(ctx context.Context, body PublishNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishNewsResponse, error)
}

type GetNewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetNewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishNewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PublishNewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishNewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetNewsWithResponse request returning *GetNewsResponse
func (c *ClientWithResponses) GetNewsWithResponse(ctx context.Context, params *GetNewsParams, reqEditors ...RequestEditorFn) (*GetNewsResponse, error) {
	rsp, err := c.GetNews(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewsResponse(rsp)
}

// PublishNewsWithBodyWithResponse request with arbitrary body returning *PublishNewsResponse
func (c *ClientWithResponses) PublishNewsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishNewsResponse, error) {
	rsp, err := c.PublishNewsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishNewsResponse(rsp)
}

func (c *ClientWithResponses) PublishNewsWithResponse(ctx context.Context, body PublishNewsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishNewsResponse, error) {
	rsp, err := c.PublishNews(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishNewsResponse(rsp)
}

// ParseGetNewsResponse parses an HTTP response from a GetNewsWithResponse call
func ParseGetNewsResponse(rsp *http.Response) (*GetNewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePublishNewsResponse parses an HTTP response from a PublishNewsWithResponse call
func ParsePublishNewsResponse(rsp *http.Response) (*PublishNewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishNewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVUW/bNhD+K8JtQF80S1n2pKe5S1ZkWLshKbCHIjBo6iyxE0mFPCY1Av/34UhZtiu5",
	"6IK8iTre9919/Hh8Bml1bw0a8lA9g0PfW+MxLq5wI0JH185Zx2tpDaEh/hR93ykpSFlTfPbW8D8vW9SC",
	"v350uIEKfigO4EWK+iKi3Q40sNvtcqjRS6d6BoMKllmDBp2SGfLWzI17831Fd0FK9P7VanqXCL9V1cCc",
	"afReNJg9tWgyYTLbo4uUmeeisPbAyQMyE582XD1D7ziJFA4N1PHvKV1MymTwZPWgA29kkjYTPnuDWqhu",
	"pcwqeHwDOdC2R6jAk1OmYamGQqfQy+xonYm1DZRRi4llirTLweFDUA5rqD6NsHkq/H7cb9efURIzf63m",
	"pOWj0r6PbI7l77DulG8/4JO/xYeAnua0Hc0x0adP+VgvY3xjnRYEFdSC8CdSGudE9V1oZtE8CQp+NkSK",
	"OpyP2F7JmKQI9Zns9EM4J7YTfRL0UFY+tjuWM1KctjuVkztAGZyi7R07N8n3FoVDtwzU8modV7/vdfrj",
	"n48w+JyRUvSgWUvUp3uEXwidEd2VTb2eupH3+aooGkVtWC+k1cWms0/y38Lgk195dI9K4qqu61VjO2Ga",
	"4vZ6efX+eqFryCG47iUYLKwyG7v3iJDRA/FOQQUb5bQydiFbYRph1K8NBxgXJnOB/ZfdJQbIoVMSB88b",
	"EYV5f/Px5YUWf978dv3hLnbLZkCn/V+bPd1LOh/9CMc7IIdHdD61VC7KxQXT2R6N6BVUcLkoF5fsIkFt",
	"PMSIzx8NRunGMXhTQwXvkFiXmOCERkLnofr0DIrxHwK6LeR7gTqlFe2tFEe1Fl+UDhqqi7LMQSszrEZz",
	"maDX6Ni285B9mlBHiP8fY7xCB5TJsJrPjHfum4n3+elD+3NZnnuixn3FV29fdGL8892p6SGPlz1oLdw2",
	"HVVm0lmRaPiUoqXhnkek9TOHezR4IY0j9PTW1ttXe45nRvvudPSRC7ibiPjLdLzE6znOvtcSbSjwjHBp",
	"mrrHvekPd78qis5K0bXWU3VZliWwh87FLzh+v/svAAD//6f2efujCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
